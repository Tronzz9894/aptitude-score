import React, { useState, useEffect } from 'react';
import axios from 'axios';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';

function CodingTestPage() {
  const [questions, setQuestions] = useState([
    { id: 1, title: "Reverse a String", description: "Write a function that reverses a string.", example_input: "hello", example_output: "olleh" },
    { id: 2, title: "Sum of Array", description: "Write a function that returns the sum of all elements in an array.", example_input: "[1, 2, 3]", example_output: "6" },
  ]);

  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [code, setCode] = useState('// Write your code here');
  const [output, setOutput] = useState('');
  const [loading, setLoading] = useState(false);
  const userId = localStorage.getItem('userId') || '60b1fa35c4f6e8d2e4a0c8a5';

  useEffect(() => {
    if (questions.length > 0) setSelectedQuestion(questions[0]);
  }, [questions]);

  const handleRunCode = () => {
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      if (selectedQuestion.id === 1) {
        setOutput("hello");
      } else if (selectedQuestion.id === 2) {
        setOutput("6");
      }
    }, 1000);
  };

  const handleSubmit = () => {
    alert('Submitted successfully!');
  };

  return (
    <div style={styles.page}>
      <h1 style={styles.header}>Coding Test</h1>
      <div style={styles.container}>
        <div style={styles.questionSection}>
          <label htmlFor="question-select">Select Question:</label>
          <select
            id="question-select"
            onChange={(e) => {
              const selected = questions.find((q) => q.id === parseInt(e.target.value));
              setSelectedQuestion(selected);
              setCode('// Write your code here');
              setOutput('');
            }}
            value={selectedQuestion?.id || ''}
          >
            {questions.map((q) => (
              <option key={q.id} value={q.id}>{q.title}</option>
            ))}
          </select>
          {selectedQuestion && (
            <>
              <h2>{selectedQuestion.title}</h2>
              <p>{selectedQuestion.description}</p>
              <p><strong>Example Input:</strong> {selectedQuestion.example_input}</p>
              <p><strong>Expected Output:</strong> {selectedQuestion.example_output}</p>
            </>
          )}
        </div>
        <div style={styles.editorSection}>
          <CodeMirror 
            value={code}
            height="600px"
            extensions={[javascript()]}
            onChange={(value) => setCode(value)}
          />
        </div>
      </div>
      <div style={styles.outputContainer}>
        {loading && <p>Running code...</p>}
        {output && <div style={styles.output}><h3>Output:</h3><pre>{output}</pre></div>}
      </div>
      <div style={styles.buttonGroup}>
        <button onClick={handleRunCode} style={styles.button} disabled={loading}>Run Code</button>
        <button onClick={handleSubmit} style={styles.button}>Submit</button>
      </div>
    </div>
  );
}

const styles = {
  page: {
    padding: '20px',
  },  
  header: {
    textAlign: 'center',
    fontSize: '24px',
    marginBottom: '20px',
  },
  container: {
    display: 'flex',
    justifyContent: 'space-between',
    marginBottom: '20px',
    flexWrap: 'wrap',  // Allow wrapping on smaller screens
  },
  questionSection: {
    width: '35%',
    minWidth: '280px',  // Ensures the question section is still readable on smaller screens
    marginBottom: '20px',
  },
  editorSection: {
    width: '60%',
    minWidth: '300px',
  },
  outputContainer: {
    marginTop: '20px',
  },
  output: {
    padding: '10px',
    backgroundColor: 'lightgreen',
    border: '1px solid green',
  },
  buttonGroup: {
    display: 'flex',
    justifyContent: 'space-between',
    flexDirection: 'column', // Stack buttons vertically on small screens
    gap: '10px',
    width: '100%',
    marginTop: '20px',
  },
  button: {
    padding: '10px 20px',
    cursor: 'pointer',
    fontSize: '16px',
    borderRadius: '5px',
    backgroundColor: '#007BFF',
    color: '#fff',
    border: 'none',
    transition: 'background-color 0.3s ease',
  },

  // **Responsive Styles**
  '@media (max-width: 768px)': {
    container: {
      flexDirection: 'column', // Stack the sections vertically on small screens
      alignItems: 'center',
    },
    questionSection: {
      width: '80%',
      marginBottom: '20px',
    },
    editorSection: {
      width: '80%',
    },
    buttonGroup: {
      width: '100%',
      flexDirection: 'column', // Ensure buttons stack on top of each other on small screens
    },
  },

  '@media (max-width: 480px)': {
    header: {
      fontSize: '20px',
    },
    questionSection: {
      width: '100%',
    },
    editorSection: {
      width: '100%',
    },
    button: {
      padding: '12px 15px',
      fontSize: '14px',
    },
  },
};

export default CodingTestPage;
